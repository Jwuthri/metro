{"ast":null,"code":"import _slicedToArray from \"/home/jwuthri/Documents/Github/Web/metronic_v7.1.9/theme/react/demo3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jwuthri/Documents/Github/Web/metronic_v7.1.9/theme/react/demo3/src/app/pages/MyPage.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: '100%'\n    },\n    button: {\n      marginRight: theme.spacing(1)\n    },\n    backButton: {\n      marginRight: theme.spacing(1)\n    },\n    completed: {\n      display: 'inline-block'\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  };\n});\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport function MyPage() {\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      completed = _React$useState4[0],\n      setCompleted = _React$useState4[1];\n\n  var _React$useState5 = React.useState(new Set()),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      skipped = _React$useState6[0],\n      setSkipped = _React$useState6[1];\n\n  var steps = getSteps();\n\n  var totalSteps = function totalSteps() {\n    return getSteps().length;\n  };\n\n  var isStepOptional = function isStepOptional(step) {\n    return step === 1;\n  };\n\n  var handleSkip = function handleSkip() {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep + 1;\n    });\n    setSkipped(function (prevSkipped) {\n      var newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  var skippedSteps = function skippedSteps() {\n    return skipped.size;\n  };\n\n  var completedSteps = function completedSteps() {\n    return completed.size;\n  };\n\n  var allStepsCompleted = function allStepsCompleted() {\n    return completedSteps() === totalSteps() - skippedSteps();\n  };\n\n  var isLastStep = function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  };\n\n  var handleNext = function handleNext() {\n    var newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed\n    // find the first step that has been completed\n    steps.findIndex(function (step, i) {\n      return !completed.has(i);\n    }) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleStep = function handleStep(step) {\n    return function () {\n      setActiveStep(step);\n    };\n  };\n\n  var handleComplete = function handleComplete() {\n    var newCompleted = new Set(completed);\n    newCompleted.add(activeStep);\n    setCompleted(newCompleted);\n    /**\r\n     * Sigh... it would be much nicer to replace the following if conditional with\r\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\r\n     * thus we have to resort to not being very DRY.\r\n     */\n\n    if (completed.size !== totalSteps() - skippedSteps()) {\n      handleNext();\n    }\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n    setCompleted(new Set());\n    setSkipped(new Set());\n  };\n\n  var isStepSkipped = function isStepSkipped(step) {\n    return skipped.has(step);\n  };\n\n  function isStepComplete(step) {\n    return completed.has(step);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Stepper, {\n    alternativeLabel: true,\n    nonLinear: true,\n    activeStep: activeStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, steps.map(function (label, index) {\n    var stepProps = {};\n    var buttonProps = {};\n\n    if (isStepOptional(index)) {\n      buttonProps.optional = /*#__PURE__*/React.createElement(Typography, {\n        variant: \"caption\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 38\n        }\n      }, \"Optional\");\n    }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return /*#__PURE__*/React.createElement(Step, Object.assign({\n      key: label\n    }, stepProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(StepButton, Object.assign({\n      onClick: handleStep(index),\n      completed: isStepComplete(index)\n    }, buttonProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }), label));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, allStepsCompleted() ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, \"All steps completed - you're finished\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"Reset\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, getStepContent(activeStep)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }, \"Next\"), isStepOptional(activeStep) && !completed.has(activeStep) && /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSkip,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 23\n    }\n  }, \"Skip\"), activeStep !== steps.length && (completed.has(activeStep) ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 23\n    }\n  }, \"Step \", activeStep + 1, \" already completed\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 23\n    }\n  }, completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n} //\n// import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import Stepper from '@material-ui/core/Stepper';\n// import Step from '@material-ui/core/Step';\n// import StepLabel from '@material-ui/core/StepLabel';\n// import StepContent from '@material-ui/core/StepContent';\n// // import Button from '@material-ui/core/Button';\n// import Paper from '@material-ui/core/Paper';\n// import Typography from '@material-ui/core/Typography';\n// import { Button } from \"react-bootstrap\";\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '90%',\n//   },\n//   button: {\n//     marginTop: theme.spacing(1),\n//     marginRight: theme.spacing(1),\n//   },\n//   actionsContainer: {\n//     marginBottom: theme.spacing(2),\n//   },\n//   resetContainer: {\n//     padding: theme.spacing(3),\n//   },\n// }));\n//\n// function getSteps() {\n//   return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n// }\n//\n// function getStepContent(step) {\n//   switch (step) {\n//     case 0:\n//       return `For each ad campaign that you create, you can control how much\n//               you're willing to spend on clicks and conversions, which networks\n//               and geographical locations you want your ads to show on, and more.`;\n//     case 1:\n//       return 'An ad group contains one or more ads which target a shared set of keywords.';\n//     case 2:\n//       return `Try out different ad text to see what brings in the most customers,\n//               and learn how to enhance your ads using features like ad extensions.\n//               If you run into any problems with your ads, find out how to tell if\n//               they're running and how to resolve approval issues.`;\n//     default:\n//       return 'Unknown step';\n//   }\n// }\n//\n// export function MyPage() {\n//   const classes = useStyles();\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const steps = getSteps();\n//\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//   }\n//\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//   }\n//\n//   function handleReset() {\n//     setActiveStep(0);\n//   }\n//\n//   return (\n//       <div className={classes.root}>\n//         <Stepper activeStep={activeStep} orientation=\"vertical\">\n//           <Step key={0}>\n//             <StepLabel>Init task</StepLabel>\n//             <StepContent>\n//               <Typography>\n//\n//               </Typography>\n//               <div className={classes.actionsContainer}>\n//                 <div>\n//                   <Button\n//                       variant=\"contained\"\n//                       color=\"primary\"\n//                       disabled={activeStep === 0}\n//                       onClick={handleBack}\n//                       className={classes.button}\n//                   >\n//                     Back\n//                   </Button>\n//                   <Button\n//                       // variant=\"contained\"\n//                       // color=\"primary\"\n//                       onClick={handleNext}\n//                       className={classes.button}\n//                   >\n//                     Next\n//                   </Button>\n//                 </div>\n//               </div>\n//             </StepContent>\n//           </Step>\n//\n//           {steps.map((label, index) => (\n//               <Step key={label}>\n//                 <StepLabel>{label}</StepLabel>\n//                 <StepContent>\n//                   <Typography>{getStepContent(index)}</Typography>\n//                   <div className={classes.actionsContainer}>\n//                     <div>\n//                       <Button\n//                           variant=\"contained\"\n//                           color=\"primary\"\n//                           disabled={activeStep === 0}\n//                           onClick={handleBack}\n//                           className={classes.button}\n//                       >\n//                         Back\n//                       </Button>\n//                       <Button\n//                           // variant=\"contained\"\n//                           // color=\"primary\"\n//                           onClick={handleNext}\n//                           className={classes.button}\n//                       >\n//                         {activeStep === steps.length ? 'Finish' : 'Next'}\n//                       </Button>\n//                     </div>\n//                   </div>\n//                 </StepContent>\n//               </Step>\n//           ))}\n//         </Stepper>\n//         {activeStep === steps.length + 1 && (\n//             <Paper square elevation={0} className={classes.resetContainer}>\n//               <Typography>All steps completed - you&apos;re finished</Typography>\n//               <Button variant=\"contained\" color=\"primary\"  onClick={handleReset} className={classes.button}>\n//                 reset\n//               </Button>\n//               <Button\n//                   onClick={handleReset}\n//                   className={classes.button}>\n//                 Save\n//               </Button>\n//             </Paper>\n//         )}\n//       </div>\n//   );\n// }","map":{"version":3,"sources":["/home/jwuthri/Documents/Github/Web/metronic_v7.1.9/theme/react/demo3/src/app/pages/MyPage.js"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","useStyles","theme","root","width","button","marginRight","spacing","backButton","completed","display","instructions","marginTop","marginBottom","getSteps","getStepContent","step","MyPage","classes","useState","activeStep","setActiveStep","Set","setCompleted","skipped","setSkipped","steps","totalSteps","length","isStepOptional","handleSkip","Error","prevActiveStep","prevSkipped","newSkipped","values","add","skippedSteps","size","completedSteps","allStepsCompleted","isLastStep","handleNext","newActiveStep","findIndex","i","has","handleBack","handleStep","handleComplete","newCompleted","handleReset","isStepSkipped","isStepComplete","map","label","index","stepProps","buttonProps","optional"],"mappings":"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":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  backButton: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  completed: {\r\n    display: 'inline-block',\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return 'Step 1: Select campaign settings...';\r\n    case 1:\r\n      return 'Step 2: What is an ad group anyways?';\r\n    case 2:\r\n      return 'Step 3: This is the bit I really care about!';\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport function MyPage() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [completed, setCompleted] = React.useState(new Set());\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n  const steps = getSteps();\r\n\r\n  const totalSteps = () => {\r\n    return getSteps().length;\r\n  };\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 1;\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const skippedSteps = () => {\r\n    return skipped.size;\r\n  };\r\n\r\n  const completedSteps = () => {\r\n    return completed.size;\r\n  };\r\n\r\n  const allStepsCompleted = () => {\r\n    return completedSteps() === totalSteps() - skippedSteps();\r\n  };\r\n\r\n  const isLastStep = () => {\r\n    return activeStep === totalSteps() - 1;\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const newActiveStep =\r\n        isLastStep() && !allStepsCompleted()\r\n            ? // It's the last step, but not all steps have been completed\r\n              // find the first step that has been completed\r\n            steps.findIndex((step, i) => !completed.has(i))\r\n            : activeStep + 1;\r\n\r\n    setActiveStep(newActiveStep);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStep = (step) => () => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    const newCompleted = new Set(completed);\r\n    newCompleted.add(activeStep);\r\n    setCompleted(newCompleted);\r\n\r\n    /**\r\n     * Sigh... it would be much nicer to replace the following if conditional with\r\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\r\n     * thus we have to resort to not being very DRY.\r\n     */\r\n    if (completed.size !== totalSteps() - skippedSteps()) {\r\n      handleNext();\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n    setCompleted(new Set());\r\n    setSkipped(new Set());\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  function isStepComplete(step) {\r\n    return completed.has(step);\r\n  }\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        <Stepper alternativeLabel nonLinear activeStep={activeStep}>\r\n          {steps.map((label, index) => {\r\n            const stepProps = {};\r\n            const buttonProps = {};\r\n            if (isStepOptional(index)) {\r\n              buttonProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n            }\r\n            if (isStepSkipped(index)) {\r\n              stepProps.completed = false;\r\n            }\r\n            return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepButton\r\n                      onClick={handleStep(index)}\r\n                      completed={isStepComplete(index)}\r\n                      {...buttonProps}\r\n                  >\r\n                    {label}\r\n                  </StepButton>\r\n                </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {allStepsCompleted() ? (\r\n              <div>\r\n                <Typography className={classes.instructions}>\r\n                  All steps completed - you&apos;re finished\r\n                </Typography>\r\n                <Button onClick={handleReset}>Reset</Button>\r\n              </div>\r\n          ) : (\r\n              <div>\r\n                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n                <div>\r\n                  <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                    Back\r\n                  </Button>\r\n                  <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleNext}\r\n                      className={classes.button}\r\n                  >\r\n                    Next\r\n                  </Button>\r\n                  {isStepOptional(activeStep) && !completed.has(activeStep) && (\r\n                      <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={handleSkip}\r\n                          className={classes.button}\r\n                      >\r\n                        Skip\r\n                      </Button>\r\n                  )}\r\n\r\n                  {activeStep !== steps.length &&\r\n                  (completed.has(activeStep) ? (\r\n                      <Typography variant=\"caption\" className={classes.completed}>\r\n                        Step {activeStep + 1} already completed\r\n                      </Typography>\r\n                  ) : (\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\r\n                        {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\r\n                      </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n//\r\n// import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import Stepper from '@material-ui/core/Stepper';\r\n// import Step from '@material-ui/core/Step';\r\n// import StepLabel from '@material-ui/core/StepLabel';\r\n// import StepContent from '@material-ui/core/StepContent';\r\n// // import Button from '@material-ui/core/Button';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import { Button } from \"react-bootstrap\";\r\n// const useStyles = makeStyles(theme => ({\r\n//   root: {\r\n//     width: '90%',\r\n//   },\r\n//   button: {\r\n//     marginTop: theme.spacing(1),\r\n//     marginRight: theme.spacing(1),\r\n//   },\r\n//   actionsContainer: {\r\n//     marginBottom: theme.spacing(2),\r\n//   },\r\n//   resetContainer: {\r\n//     padding: theme.spacing(3),\r\n//   },\r\n// }));\r\n//\r\n// function getSteps() {\r\n//   return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\r\n// }\r\n//\r\n// function getStepContent(step) {\r\n//   switch (step) {\r\n//     case 0:\r\n//       return `For each ad campaign that you create, you can control how much\r\n//               you're willing to spend on clicks and conversions, which networks\r\n//               and geographical locations you want your ads to show on, and more.`;\r\n//     case 1:\r\n//       return 'An ad group contains one or more ads which target a shared set of keywords.';\r\n//     case 2:\r\n//       return `Try out different ad text to see what brings in the most customers,\r\n//               and learn how to enhance your ads using features like ad extensions.\r\n//               If you run into any problems with your ads, find out how to tell if\r\n//               they're running and how to resolve approval issues.`;\r\n//     default:\r\n//       return 'Unknown step';\r\n//   }\r\n// }\r\n//\r\n// export function MyPage() {\r\n//   const classes = useStyles();\r\n//   const [activeStep, setActiveStep] = React.useState(0);\r\n//   const steps = getSteps();\r\n//\r\n//   function handleNext() {\r\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n//   }\r\n//\r\n//   function handleBack() {\r\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n//   }\r\n//\r\n//   function handleReset() {\r\n//     setActiveStep(0);\r\n//   }\r\n//\r\n//   return (\r\n//       <div className={classes.root}>\r\n//         <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n//           <Step key={0}>\r\n//             <StepLabel>Init task</StepLabel>\r\n//             <StepContent>\r\n//               <Typography>\r\n//\r\n//               </Typography>\r\n//               <div className={classes.actionsContainer}>\r\n//                 <div>\r\n//                   <Button\r\n//                       variant=\"contained\"\r\n//                       color=\"primary\"\r\n//                       disabled={activeStep === 0}\r\n//                       onClick={handleBack}\r\n//                       className={classes.button}\r\n//                   >\r\n//                     Back\r\n//                   </Button>\r\n//                   <Button\r\n//                       // variant=\"contained\"\r\n//                       // color=\"primary\"\r\n//                       onClick={handleNext}\r\n//                       className={classes.button}\r\n//                   >\r\n//                     Next\r\n//                   </Button>\r\n//                 </div>\r\n//               </div>\r\n//             </StepContent>\r\n//           </Step>\r\n//\r\n//           {steps.map((label, index) => (\r\n//               <Step key={label}>\r\n//                 <StepLabel>{label}</StepLabel>\r\n//                 <StepContent>\r\n//                   <Typography>{getStepContent(index)}</Typography>\r\n//                   <div className={classes.actionsContainer}>\r\n//                     <div>\r\n//                       <Button\r\n//                           variant=\"contained\"\r\n//                           color=\"primary\"\r\n//                           disabled={activeStep === 0}\r\n//                           onClick={handleBack}\r\n//                           className={classes.button}\r\n//                       >\r\n//                         Back\r\n//                       </Button>\r\n//                       <Button\r\n//                           // variant=\"contained\"\r\n//                           // color=\"primary\"\r\n//                           onClick={handleNext}\r\n//                           className={classes.button}\r\n//                       >\r\n//                         {activeStep === steps.length ? 'Finish' : 'Next'}\r\n//                       </Button>\r\n//                     </div>\r\n//                   </div>\r\n//                 </StepContent>\r\n//               </Step>\r\n//           ))}\r\n//         </Stepper>\r\n//         {activeStep === steps.length + 1 && (\r\n//             <Paper square elevation={0} className={classes.resetContainer}>\r\n//               <Typography>All steps completed - you&apos;re finished</Typography>\r\n//               <Button variant=\"contained\" color=\"primary\"  onClick={handleReset} className={classes.button}>\r\n//                 reset\r\n//               </Button>\r\n//               <Button\r\n//                   onClick={handleReset}\r\n//                   className={classes.button}>\r\n//                 Save\r\n//               </Button>\r\n//             </Paper>\r\n//         )}\r\n//       </div>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}